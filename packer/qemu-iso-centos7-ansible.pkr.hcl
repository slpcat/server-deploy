
variable "format" {
  type    = string
  default = "qcow2"
}

variable "password" {
  type    = string
  default = "centos"
}

variable "user" {
  type    = string
  default = "root"
}

locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }

source "qemu" "autogenerated_1" {
  accelerator       = "kvm"
  qemu_binary       = "qemu-system-x86_64"
  #machine_type      = "pc"
  boot_command      = ["<tab> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos7.ks<enter><wait>"]
  boot_wait         = "10s"
  disk_interface    = "virtio"
  #cdrom_interface   = "virtio-scsi"
  disk_size         = 4096
  format            = "${var.format}"
  headless          = true
  http_directory    = "../http"
  iso_checksum      = "13675c6f74880e7ff3481b91bdaf925ce81bda8f"
  iso_url           = "https://vault.centos.org/7.5.1804/isos/x86_64/CentOS-7-x86_64-Minimal-1804.iso"
  net_device        = "virtio-net"
  output_directory  = "build"
  qemuargs          = [["-m", "2048M"], ["-smp", "4"]]
  shutdown_command  = "echo '${var.password}'|sudo -S shutdown -h now"
  ssh_password      = "${var.password}"
  ssh_username      = "${var.user}"
  ssh_wait_timeout  = "60m"
  vnc_bind_address  = "0.0.0.0"
  vnc_use_password  = true
  vm_name           = "centos7-amd64-${local.timestamp}.${var.format}"
}

build {
  sources = ["source.qemu.autogenerated_1"]

  provisioner "shell" {
    expect_disconnect = false
    pause_before      = "20s"
    inline = [
      "sudo yum install -y python3 python3-pip",
      "sudo pip3 install -U pip",
      "sudo pip3 install netaddr pbr hvac jmespath ruamel.yaml",
      "sudo pip3 install ansible"
    ]
  }

  provisioner "ansible-local" {
    role_paths    = [
      "../roles/init-node-centos7",
      "../roles/install-zabbix"
      #"../roles/init-ali-k8s-centos7"
    ]
    group_vars    = "../group_vars"
    playbook_dir  = "../playbooks"
    playbook_file = "../playbooks/init-node-centos7-localhost.yml"
    #inventory_groups =
    #command =
    extra_arguments = [
      "-b -v"
      #"--vault-password-file=/bin/cat",
      #"user `ansible_extra_arguments`}}",
    #  "--extra-vars deploy_env=groupclass"
    ]
  }

  provisioner "shell" {
    expect_disconnect = false
    inline = [
      "echo === System Cleanup ===",
      "sudo rm -f /root/.bash_history",
      "sudo rm -f /home/${var.user}/.bash_history",
      "sudo rm -f /var/log/wtmp",
      "sudo rm -f /var/log/btmp",
      "sudo rm -rf /var/log/installer",
      "sudo rm -rf /var/lib/cloud/instances",
      "sudo rm -rf /tmp/* /var/tmp/* /tmp/.*-unix",
      "sudo find /var/cache -type f -delete",
      "sudo find /var/log -type f | while read f; do echo -n '' | sudo tee $f > /dev/null; done;",
      "sudo rm -rf /var/lib/cloud/*"
    ]
  }

  post-processors {
    post-processor "shell-local" {
      inline = ["/usr/bin/ovftool <packer-output-directory>/<vmware-name>.vmx <packer-output-directory>/<vmware-name>.ova"]
    }
    post-processor "artifice" {
      files = ["<packer-output-directory>/<vmware-name>.ova"]
    }
    post-processor "amazon-import" {
      access_key     = "YOUR KEY HERE"
      license_type   = "BYOL"
      region         = "us-east-1"
      s3_bucket_name = "vm-images"
      secret_key     = "YOUR SECRET KEY HERE"
      tags = {
        Description = "packer amazon-import ${local.timestamp}"
      }
    }
    post-processor "alicloud-import" {
      access_key         = "${var.access_key}"
      image_architecture = "x86_64"
      image_name         = "packer_import"
      image_os_type      = "linux"
      image_platform     = "CentOS"
      image_system_size  = "40"
      oss_bucket_name    = "vm-images"
      region             = "cn-beijing"
      secret_key         = "${var.secret_key}"
    }
  }
}
